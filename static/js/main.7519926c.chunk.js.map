{"version":3,"sources":["Loading.js","App.js","Hoc/NetworkDetector.jsx","reportWebVitals.js","index.js"],"names":["Loading","props","console","log","id","Text","data","quote","author","App","state","load","addQuote","bind","setData","randNum","Math","floor","random","text","auth","this","onClick","setState","document","querySelector","style","backgroundColor","prevProps","prevState","newColor","btn","getElementsByTagName","Object","values","a","fetch","response","ok","message","status","Error","json","entries","forEach","entry","href","target","React","Component","NetworkDetector","ComposedComponent","isDisconnected","handleConnectionChange","navigator","onLine","webPing","setInterval","mode","then","clearInterval","catch","window","addEventListener","removeEventListener","className","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","CLICK","colorArray","Container","connect","dispatch","type","store","createStore","action","idx","length","ReactDOM","render","getElementById"],"mappings":"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","file":"static/js/main.7519926c.chunk.js","sourcesContent":["import React from \"react\";\r\nimport './Loading.css'\r\n\r\nfunction Loading(props) {\r\n    console.log('loading up the icon instead of quotes')\r\n    return (\r\n        \r\n        <div id=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\r\n    )\r\n}\r\n\r\nexport default Loading;","\r\nimport NetworkDetector from './Hoc/NetworkDetector';\r\n\r\nimport React from 'react';\r\nimport Loading from './Loading.js'\r\nimport './App.css';\r\n\r\n\r\nfunction Text(props) {\r\n\r\n    console.log('Loading quotes')\r\n    return (\r\n        <div>\r\n           \r\n            <div id='text'><p>{props.data.quote}</p></div>\r\n            <div id='author'><p>-{props.data.author}</p></div>\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\nclass App extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            quote: '',\r\n            author: '',\r\n            load: false,\r\n        }\r\n        this.addQuote = this.addQuote.bind(this);\r\n        this.setData = this.setData.bind(this)\r\n    }\r\n\r\n    setData(data) {\r\n\r\n        // data is an object with 20 different objects containing quotes and authors\r\n        const randNum = Math.floor(Math.random() * 20)\r\n        const text = data[randNum].text;\r\n        const auth = data[randNum].author;\r\n\r\n        this.props.onClick();\r\n\r\n        console.log('setting data and load to false')\r\n\r\n        // we set the state properties to the text and\r\n        // set load to the opposite of what it was before\r\n        this.setState({\r\n            quote: text,\r\n            author: auth,\r\n            load: !this.state.load\r\n        })\r\n\r\n    }\r\n\r\n    // triggered on the first render so that if the page reloads or connection is secured again, \r\n    // the page will revert back to its original colors\r\n    componentWillMount() {\r\n        const body = document.querySelector(\"body\");\r\n        body.style.backgroundColor = '#E6B3B3';\r\n    }\r\n\r\n    // this lifecycle method will update the color to a different color everytime \r\n    // a change was made to the state\r\n    componentDidUpdate(prevProps, prevState) {\r\n\r\n        console.log('component updated')\r\n\r\n        const body = document.querySelector(\"body\");\r\n        body.style.backgroundColor = this.props.newColor;\r\n\r\n        const btn = document.getElementsByTagName(\"button\");\r\n        var value = Object.values(btn)\r\n        for (let b of value) {\r\n            b.style.backgroundColor = this.props.newColor;\r\n        }\r\n\r\n    }\r\n\r\n\r\n    // this will fetch a random quote from an API\r\n    async addQuote() {\r\n\r\n        // we want to provide a loading screen temporarily while the user waits for data\r\n        console.log('current value of load is ' + this.state.load)\r\n        this.setState({\r\n            load: true,\r\n        })\r\n        console.log('new value of load after setting ' + this.state.load)\r\n\r\n\r\n        const response = await fetch('https://type.fit/api/quotes');\r\n        if (!response.ok) {\r\n            const message = `An error has occured: ${response.status}`;\r\n            throw new Error(message);\r\n        }\r\n        const data = await response.json();\r\n\r\n        // because the author may be null, we just replace it with 'unkown'\r\n        Object.entries(data).forEach(function (entry) {\r\n            if (entry[1][\"author\"] == null) {\r\n                entry[1].author = \"unknown\";\r\n            }\r\n        })\r\n\r\n        // updating the state of this component \r\n        this.setData(data);\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        console.log('render is called')\r\n\r\n        if (this.state.load === false) {\r\n            console.log('load should not show because it is false')\r\n        }\r\n        else {\r\n            console.log('load should show because it is true')\r\n        }\r\n\r\n\r\n        return (\r\n\r\n            <div>\r\n\r\n                <div id='quote-box' style={{ \"color\": this.props.newColor }}>\r\n\r\n                    {/* if the load is true we display it */}\r\n                    {this.state.load === true && <Loading />}\r\n\r\n                    {/* if the load is false we display the quote instead */}\r\n                    {this.state.load === false &&\r\n                        <div><Text data={this.state} /></div>}\r\n\r\n                    {/* Buttons to acccess different links and to also generate a new quote */}\r\n                    <footer>\r\n                        <button id='tmblr-btn'><a id='tumblr' href='https://www.tumblr.com/login?redirect_to=https%3A%2F%2Fwww.tumblr.com%2Fwidgets%2Fshare%2Ftool%3Fposttype%3Dquote%26tags%3Dquotes%252Cfreecodecamp%26caption%3DMae%2BJemison%26content%3DIt%25E2%2580%2599s%2Byour%2Bplace%2Bin%2Bthe%2Bworld%253B%2Bit%25E2%2580%2599s%2Byour%2Blife.%2BGo%2Bon%2Band%2Bdo%2Ball%2Byou%2Bcan%2Bwith%2Bit%252C%2Band%2Bmake%2Bit%2Bthe%2Blife%2Byou%2Bwant%2Bto%2Blive.%26canonicalUrl%3Dhttps%253A%252F%252Fwww.tumblr.com%252Fbuttons%26shareSource%3Dtumblr_share_button' target=\"blank\"> Tumblr</a></button>\r\n                        <button id='tweet-btn' ><a id='tweet-quote' href=\"https://twitter.com/intent/tweet?hashtags=quotes&related=freecodecamp&text=%22It%E2%80%99s%20your%20place%20in%20the%20world%3B%20it%E2%80%99s%20your%20life.%20Go%20on%20and%20do%20all%20you%20can%20with%20it%2C%20and%20make%20it%20the%20life%20you%20want%20to%20live.%22%20Mae%20Jemison\" target='blank'>Twitter</a></button>\r\n                        <button id='new-quote' onClick={this.addQuote}>New Quote</button>\r\n                    </footer>\r\n\r\n                </div>\r\n\r\n                <div id={'creator'}>William Kim</div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\n};\r\n// returns jsx of our quote box\r\nexport default NetworkDetector(App);","import React, { Component } from 'react';\r\nimport './NetworkDetector.css'\r\n// eslint-disable-next-line \r\nexport default function (ComposedComponent) {\r\n    \r\n    class NetworkDetector extends Component {\r\n        state = {\r\n            isDisconnected: false\r\n        }\r\n\r\n        componentDidMount() {\r\n            this.handleConnectionChange();\r\n            window.addEventListener('online', this.handleConnectionChange);\r\n            window.addEventListener('offline', this.handleConnectionChange);\r\n        }\r\n\r\n        componentWillUnmount() {\r\n            window.removeEventListener('online', this.handleConnectionChange);\r\n            window.removeEventListener('offline', this.handleConnectionChange);\r\n        }\r\n\r\n\r\n        handleConnectionChange = () => {\r\n            const condition = navigator.onLine ? 'online' : 'offline';\r\n            if (condition === 'online') {\r\n                const webPing = setInterval(\r\n                    () => {\r\n                        fetch('//google.com', {\r\n                            mode: 'no-cors',\r\n                        })\r\n                            .then(() => {\r\n                                this.setState({ isDisconnected: false }, () => {\r\n                                    return clearInterval(webPing)\r\n                                });\r\n                            }).catch(() => this.setState({ isDisconnected: true }))\r\n                    }, 2000);\r\n                return;\r\n            }\r\n\r\n            return this.setState({ isDisconnected: true });\r\n        }\r\n\r\n        render() {\r\n            const { isDisconnected } = this.state;\r\n\r\n            if(isDisconnected){\r\n                console.log('Internet is lost')\r\n            }\r\n            else {\r\n                console.log('Internet is up')\r\n\r\n            }\r\n\r\n            \r\n            return (\r\n                <div>\r\n                    {isDisconnected && (<div className=\"internet-error\">\r\n                        <p>Internet connection lost</p>\r\n                    </div>)\r\n                    }\r\n                    {!isDisconnected && \r\n                        <ComposedComponent {...this.props}/>\r\n                    \r\n                    }\r\n                    \r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n    return NetworkDetector;\r\n}","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport { connect } from 'react-redux';\r\nimport { createStore } from 'redux';\r\nimport App from './App.js';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\n\r\n////////////Redux ///////////\r\n\r\nconst CLICK = 'CLICK'\r\n\r\nconst toggleButton = () => {\r\n  return {\r\n    type: CLICK\r\n  };\r\n}\r\nconst colorArray = [\r\n  '#16a085',\r\n  '#27ae60',\r\n  '#2c3e50',\r\n  '#f39c12',\r\n  '#e74c3c',\r\n  '#9b59b6',\r\n  '#FB6964',\r\n  '#342224',\r\n  '#472E32',\r\n  '#BDBB99',\r\n  '#77B1A9',\r\n  '#73A857'];\r\n\r\nconst colorReducer = (state = '#E6B3B3', action) => {\r\n\r\n  if (action.type === CLICK) {\r\n    console.log('clicked!')\r\n    const idx = Math.floor(Math.random() * colorArray.length - 1)\r\n    console.log('changing color')\r\n    return colorArray[idx];\r\n  }\r\n  else {\r\n    return state;\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return { newColor: state }\r\n};\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onClick: () => {\r\n      dispatch(toggleButton())\r\n    }\r\n  }\r\n};\r\n\r\nconst Container = connect(mapStateToProps, mapDispatchToProps)(App);\r\nconst store = createStore(colorReducer);\r\n// render the page\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <Container />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n\r\n);\r\n\r\n\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals(console.log);\r\n"],"sourceRoot":""}